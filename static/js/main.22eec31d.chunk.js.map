{"version":3,"sources":["materials/plywoodMaterial.ts","components/Module.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["tl","THREE","rpt","texture","wrapS","wrapT","offset","set","repeat","plywoodMaterial","color","map","load","displacementMap","normalMap","aoMap","aoMapIntensity","envMapIntensity","displacementScale","roughness","metalness","side","polygonOffset","polygonOffsetFactor","types","variations","fill","Module","pos","type","variation","useState","obj","split","Number","x","z","url","useMemo","console","log","OBJLoader","children","filter","c","name","includes","material","position","onClick","e","stopPropagation","object","findIndex","t","v","child","key","geometry","receiveShadow","castShadow","Building","Object","entries","k","App","camera","fov","shadowMap","enabled","intensity","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.22eec31d.chunk.js","sourcesContent":["import * as THREE from \"three\";\n\nconst tl = new THREE.TextureLoader();\n\nconst rpt = function (texture) {\n  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n  texture.offset.set(0, 0);\n  texture.repeat.set(2, 2);\n};\n\nconst plywoodMaterial = new THREE.MeshStandardMaterial({\n  color: 0xeeeeee,\n  map: tl.load(\n    \"46_plywood texture-seamless_hr/46_plywood texture-seamless_hr_DIFFUSE.jpg\",\n    rpt\n  ),\n  displacementMap: tl.load(\n    \"46_plywood texture-seamless_hr/46_plywood texture-seamless_hr_DISPL.jpg\",\n    rpt\n  ),\n  normalMap: tl.load(\n    \"46_plywood texture-seamless_hr/46_plywood texture-seamless_hr_NORM.jpg\",\n    rpt\n  ),\n  aoMap: tl.load(\n    \"46_plywood texture-seamless_hr/46_plywood texture-seamless_hr-AO.jpg\",\n    rpt\n  ),\n  // side: THREE.DoubleSide\n  // specularMap: tl.load('/46_plywood texture-seamless_hr/46_plywood texture-seamless_hr_SPEC.jpg', rpt),\n  // shininess: 0,\n  // normalScale: 1.0,\n\n  // ambientIntensity: 0.3,\n  aoMapIntensity: 3.0,\n  envMapIntensity: 1.5,\n  // https://discourse.threejs.org/t/material-displacement-map-makes-the-texture-unwrap-the-models-surfaces/5119/11\n  displacementScale: 0,\n  roughness: 0.8,\n  metalness: 0,\n  side: THREE.DoubleSide,\n  polygonOffset: true,\n  polygonOffsetFactor: 1\n});\n\nexport default plywoodMaterial;\n","import React, { useMemo, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\nimport plywoodMaterial from \"../materials/plywoodMaterial\";\n\nconst types = [\"A2\", \"B2\", \"C2\", \"D1\", \"E1\", \"A1\", \"B1\", \"C1\"];\n\nconst variations = [\"04\", \"03\", \"02\", \"01\", \"05\", \"06\", \"07\"];\n\nconst fill = new THREE.MeshLambertMaterial({ color: 'white' })\n\nconst Module = ({ pos, type, variation }) => {\n  const [obj, set] = useState();\n\n  const [x, z] = pos.split(\",\").map(Number)\n\n  const url = \"models/Toolbox_Stripmaker_WHAlm_v1.5_kaal-SU18.obj\";\n  useMemo(() => {\n    console.log(\"loading model\");\n    new OBJLoader().load(url, set);\n  }, [url]);\n\n  if (obj) {\n    const children = obj.children.filter(c =>\n      c.name.includes(`Module_${type}_${variation}`) && c.type === \"Mesh\"\n    );\n    console.log(children.map(c => c.material))\n    return (\n      <group\n        position={[x * 1.2, 0, z * 1.2]}\n        onClick={e => {\n          e.stopPropagation();\n          console.log(e.object);\n        }}\n      >\n        <group\n          position={[\n            types.findIndex(t => t === type) * -10 - 3,\n            0,\n            variations.findIndex(v => v === variation) * 10.8 + 0.6\n          ]}\n        >\n          {children.map(child => (\n            // <primitive key={child.name} object={child} />\n            <mesh key={child.name} geometry={child.geometry} material={child.material.name === \"Wood_3_Ver\" ? plywoodMaterial : fill} receiveShadow castShadow />\n          ))}\n        </group>\n      </group>\n    );\n  }\n  return null;\n};\n\nexport default Module;\n","import { OrbitControls } from \"drei\";\nimport React from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport \"./app.css\";\nimport Module from \"./components/Module\";\n\n\n\nconst Building = () => {\n\n  const grid = {\n    \"0,-4\": {\n      type: \"D1\",\n      variation: \"03\"\n    },\n    \"0,-3\": {\n      type: \"C2\",\n      variation: \"03\"\n    },\n    \"0,-2\": {\n      type: \"C2\",\n      variation: \"03\"\n    },\n    \"0,-1\": {\n      type: \"C2\",\n      variation: \"01\"\n    },\n    \"0,0\": {\n      type: \"C2\",\n      variation: \"01\"\n    },\n    \"0,1\": {\n      type: \"C2\",\n      variation: \"02\"\n    },\n    \"0,2\": {\n      type: \"D1\",\n      variation: \"02\"\n    }\n  }\n\n  return (\n    <>\n      {Object.entries(grid).map(([k, v]) => <Module key={k} pos={k} {...v} />)}\n    </>\n  );\n};\n\nfunction App() {\n  return (\n    <Canvas camera={{ fov: 45, position: [-2, 10, 10] }} shadowMap={{ enabled: true }}>\n      <ambientLight intensity={0.75} />\n      <pointLight position={[10, 15, 10]} intensity={0.2} />\n      <Building />\n      {/* <Ground /> */}\n      <OrbitControls target={[0, 2, 0]} />\n    </Canvas>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}