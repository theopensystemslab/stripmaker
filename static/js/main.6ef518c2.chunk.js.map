{"version":3,"sources":["components/ClippingSlider.tsx","materials/plywoodMaterial.ts","components/Module.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["marks","makeStyles","root","height","value","label","clipPlanes","THREE","ClippingSlider","useState","val","setVal","id","Slider","orientation","aria-labelledby","max","min","step","onChange","e","v","constant","fill","color","clippingPlanes","clipIntersection","clipShadows","tl","rpt","texture","wrapS","wrapT","offset","set","repeat","plywoodMaterial","map","load","displacementMap","normalMap","aoMap","aoMapIntensity","envMapIntensity","displacementScale","roughness","metalness","side","polygonOffset","polygonOffsetFactor","types","variations","Module","pos","type","variation","obj","split","Number","x","z","url","useMemo","console","log","OBJLoader","children","filter","c","name","includes","position","onClick","stopPropagation","object","findIndex","t","child","key","geometry","material","receiveShadow","castShadow","Building","useThree","gl","localClippingEnabled","Object","entries","k","App","camera","fov","shadowMap","enabled","antialias","pixelRatio","window","devicePixelRatio","intensity","shadowMapWidth","shadowMapHeight","shadowBias","rotation","Math","PI","attach","args","opacity","target","rotateSpeed","maxPolarAngle","minDistance","maxDistance","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6ef518c2.chunk.js","sourcesContent":["import Slider from \"@material-ui/core/Slider\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { useState } from \"react\";\nimport * as THREE from \"three\";\n\nconst useStyles = makeStyles({\n  root: {\n    height: 300\n  }\n});\n\nconst marks = [\n  {\n    value: 8,\n    label: \"Roof\"\n  },\n  {\n    value: 4,\n    label: \"First Floor\"\n  },\n  {\n    value: 1,\n    label: \"Ground Floor\"\n  }\n];\n\nexport const clipPlanes = [new THREE.Plane(new THREE.Vector3(0, -1, 0), 8)];\n\nconst ClippingSlider = () => {\n  const [val, setVal] = useState(8);\n\n  return (\n    <div id=\"clipping-slider\">\n      <Slider\n        orientation=\"vertical\"\n        value={val}\n        aria-labelledby=\"vertical-slider\"\n        marks={marks}\n        max={8}\n        min={1}\n        step={1}\n        onChange={(e, v: number) => {\n          setVal(v);\n          clipPlanes[0].constant = v;\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ClippingSlider;\n","import * as THREE from \"three\";\n\nimport { clipPlanes } from \"../components/ClippingSlider\";\n\nexport const fill = new THREE.MeshLambertMaterial({\n  color: \"white\",\n  // flatShading: true,\n  clippingPlanes: clipPlanes,\n  clipIntersection: true,\n  clipShadows: true\n});\n\nconst tl = new THREE.TextureLoader();\n\nconst rpt = function(texture) {\n  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n  texture.offset.set(0, 0);\n  texture.repeat.set(2, 2);\n  // texture.mapping = THREE.CubeUVReflectionMapping;\n};\n\nconst plywoodMaterial = new THREE.MeshStandardMaterial({\n  color: 0xeeeeee,\n  map: tl.load(\n    \"46_plywood texture-seamless_hr/46_plywood texture-seamless_hr_DIFFUSE.jpg\",\n    rpt\n  ),\n  displacementMap: tl.load(\n    \"46_plywood texture-seamless_hr/46_plywood texture-seamless_hr_DISPL.jpg\",\n    rpt\n  ),\n  normalMap: tl.load(\n    \"46_plywood texture-seamless_hr/46_plywood texture-seamless_hr_NORM.jpg\",\n    rpt\n  ),\n  aoMap: tl.load(\n    \"46_plywood texture-seamless_hr/46_plywood texture-seamless_hr-AO.jpg\",\n    rpt\n  ),\n  // side: THREE.DoubleSide\n  // specularMap: tl.load('/46_plywood texture-seamless_hr/46_plywood texture-seamless_hr_SPEC.jpg', rpt),\n  // shininess: 0,\n  // normalScale: 1.0,\n\n  // ambientIntensity: 0.3,\n  aoMapIntensity: 3.0,\n  envMapIntensity: 1.5,\n  // https://discourse.threejs.org/t/material-displacement-map-makes-the-texture-unwrap-the-models-surfaces/5119/11\n  displacementScale: 0,\n  roughness: 0.8,\n  metalness: 0,\n  side: THREE.DoubleSide,\n  polygonOffset: true,\n  polygonOffsetFactor: 1,\n\n  // flatShading: true,\n  clippingPlanes: clipPlanes,\n  clipIntersection: true\n  // clipShadows: true\n});\n\nexport default plywoodMaterial;\n","import React, { useMemo, useState } from \"react\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\n\nimport plywoodMaterial, { fill } from \"../materials/plywoodMaterial\";\n\nconst types = [\"A2\", \"B2\", \"C2\", \"D1\", \"E1\", \"A1\", \"B1\", \"C1\"];\n\nconst variations = [\"04\", \"03\", \"02\", \"01\", \"05\", \"06\", \"07\"];\n\nconst Module = ({ pos, type, variation }) => {\n  const [obj, set] = useState();\n\n  const [x, z] = pos.split(\",\").map(Number);\n\n  const url = \"models/Toolbox_Stripmaker_WHAlm_v1.5_kaal-SU18.obj\";\n\n  useMemo(() => {\n    console.log(\"loading model\");\n    new OBJLoader().load(url, set);\n  }, [url]);\n\n  if (obj) {\n    const children = obj.children.filter(\n      c => c.name.includes(`Module_${type}_${variation}`) && c.type === \"Mesh\"\n    );\n    return (\n      <group\n        position={[x * 1.2, 0, z * 1.2]}\n        onClick={e => {\n          e.stopPropagation();\n          console.log(e.object);\n        }}\n      >\n        <group\n          position={[\n            types.findIndex(t => t === type) * -10 - 3,\n            0,\n            variations.findIndex(v => v === variation) * 10.8 + 0.6\n          ]}\n        >\n          {children.map(child => (\n            // <primitive key={child.name} object={child} />\n            <mesh\n              key={child.name}\n              geometry={child.geometry}\n              material={\n                child.material.name === \"Wood_3_Ver\" ? plywoodMaterial : fill\n              }\n              receiveShadow\n              castShadow={child.material.name !== \"Wood_3_Ver\"}\n            />\n          ))}\n        </group>\n      </group>\n    );\n  }\n  return null;\n};\n\nexport default Module;\n","import \"./app.css\";\n\nimport { OrbitControls } from \"drei\";\nimport React from \"react\";\nimport { Canvas, useThree } from \"react-three-fiber\";\nimport * as THREE from \"three\";\n\nimport ClippingSlider from \"./components/ClippingSlider\";\nimport Module from \"./components/Module\";\n\nconst Building = () => {\n  const { gl } = useThree();\n  gl.localClippingEnabled = true;\n\n  const grid = {\n    \"0,-4\": {\n      type: \"D1\",\n      variation: \"03\"\n    },\n    \"0,-3\": {\n      type: \"C2\",\n      variation: \"03\"\n    },\n    \"0,-2\": {\n      type: \"C2\",\n      variation: \"03\"\n    },\n    \"0,-1\": {\n      type: \"C2\",\n      variation: \"01\"\n    },\n    \"0,0\": {\n      type: \"C2\",\n      variation: \"01\"\n    },\n    \"0,1\": {\n      type: \"C2\",\n      variation: \"02\"\n    },\n    \"0,2\": {\n      type: \"D1\",\n      variation: \"02\"\n    }\n  };\n\n  return (\n    <>\n      {Object.entries(grid).map(([k, v]) => (\n        <Module key={k} pos={k} {...v} />\n      ))}\n    </>\n  );\n};\n\nfunction App() {\n  return (\n    <>\n      <ClippingSlider />\n      <Canvas\n        camera={{ fov: 45, position: [8, 12, 14] }}\n        shadowMap={{ enabled: true, type: THREE.PCFSoftShadowMap }}\n        gl={{ antialias: true }}\n        pixelRatio={window.devicePixelRatio}\n      >\n        <ambientLight intensity={0.85} />\n        <pointLight\n          position={[40, 90, 45]}\n          castShadow\n          intensity={0.1}\n          shadowMapWidth={1024}\n          shadowMapHeight={1024}\n          shadowBias={-0.0004}\n        />\n        <Building />\n        {/* <Ground /> */}\n        <mesh name=\"ground\" rotation={[-Math.PI / 2, 0, 0]} receiveShadow>\n          <planeBufferGeometry attach=\"geometry\" args={[30, 30, 1, 1]} />\n          <shadowMaterial\n            attach=\"material\"\n            color={0}\n            opacity={0.2}\n            side={THREE.DoubleSide}\n          />\n          {/* <meshBasicMaterial color=\"red\" side={THREE.DoubleSide} attach=\"material\" /> */}\n        </mesh>\n        <OrbitControls\n          target={[0, 3, 0]}\n          // enableDamping\n          // dampingFactor={0.2}\n          rotateSpeed={0.7}\n          maxPolarAngle={1.49}\n          enabled\n          minDistance={5}\n          maxDistance={30}\n        />\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}